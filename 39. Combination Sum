const int ZERO = [](){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    return 0;
}();

class Solution {
public:
    vector<vector<int>> combinationSum1(vector<int>& candidates, int target) 
    {
        vector<vector<int>> res;
        vector<int> cur_combination;
        sort(candidates.begin(), candidates.end());
        helper(candidates, target, 0, 0, cur_combination, res);
        return res;
    }
    
    void helper
    (
        vector<int>& candidates, 
        int target, 
        int start, 
        int cur_sum, 
        vector<int>& cur_combination, 
        vector<vector<int>>& res
    ) 
    {
        if (cur_sum == target) 
        {
            res.push_back(cur_combination);
            return;
        }
        
        if (cur_sum > target) 
        {
            return;
        }
        for (int i = start; i < candidates.size(); i++) {
            cur_combination.push_back(candidates[i]);
            helper
            (
                candidates, 
                target, 
                i, 
                cur_sum + candidates[i], 
                cur_combination, 
                res
            );
            cur_combination.pop_back();
        }
    }

    vector<vector<int>> combinationSum(vector<int>& candidates, int target) 
    {
        vector<vector<vector<int>>> dp(target + 1);
        
        dp[0] = {{}};
        
        for(int c : candidates) 
        {
            for(int i = c; i <= target; ++i) 
            {
                for(auto& comb : dp[i - c]) 
                {
                    comb.push_back(c);
                    dp[i].push_back(comb);
                    comb.pop_back();
                }
            }
        }
        return dp[target];
    }
};

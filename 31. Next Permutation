const int ZERO = [](){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    return 0;
}();

class Solution {
public:
    void nextPermutation1(vector<int>& nums) 
    {
       int n = (int)nums.size();
       
       if(n < 2) 
       {
           return;
       }
       
       int i = n - 2;
       
       while(i >= 0 && nums[i] >= nums[i + 1]) 
       {
           --i;
       }
       
       if(i < 0)
       {
            reverse(nums.begin(), nums.end()); 
            return;
       }
       
       int j = n - 1;
       
       while(j > i && nums[j] <= nums[i]) 
       {
           j--;
       }
       
       std::swap(nums[i], nums[j]);
       
       reverse(nums.begin() + i + 1, nums.end());    
    }

    void nextPermutation(vector<int>& nums) 
    {
        auto first = nums.begin(), after = nums.end(), cur = after;

        while(true)
        {
            --cur;

            if(cur == first)
            {
                reverse(first, after);

                return;
            }

            auto prev = cur;

            --prev;

            if(*prev < *cur)
            {
                auto i = after;

                while(true)
                {
                    --i;

                    if(*i > *prev)
                    {
                        swap(*i, *prev);
                        reverse(cur, after);

                        return;
                    }
                }
            }
        }
    }
};

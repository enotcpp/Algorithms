class Solution {
public:
    int findMaxLength1(vector<int>& nums) 
    {
        int size = int(nums.size()), answer = 0;

        unordered_map<int, pair<int, int>> dists; 

        vector<int> dp(size + 1);

        dists[0] = {-1, -1};

        for(int i = 0; i < size; ++i)
        {
            dp[i + 1] += dp[i] + (nums[i] ? 1 : -1);

            if(dists.find(dp[i + 1]) == dists.end())
            {
                dists[dp[i + 1]] = {i, i};     
            }
            else
            {
                auto& p = dists[dp[i + 1]];

                p.second = i;

                answer = max(answer, p.second - p.first);
            }
        }

        return answer;
    }

    int findMaxLength(vector<int>& nums) 
    {
        int size = int(nums.size()), acc = size, answer = 0;

        vector<int> dists(size + size + 1); 

        dists[size] = size;

        for(int i = 1; i <= size; ++i)
        {
            acc += nums[i - 1] ? 1 : -1;

            if(dists[acc])
            {
                answer = max(answer, i > dists[acc] ? i - dists[acc] : i);
            }
            else
            {
                dists[acc] = i; 
            } 
        }

        return answer;
    }   
};

const int ZERO = [](){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    return 0;
}();

class Solution {
public:

    vector<vector<int>> fourSum(vector<int>& nums, int tg) {
        int n = nums.size();
        vector<vector<int>>ans;
        set<vector< int>>st;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < n - 3 ; i++) {
            if (i > 0 && (nums[i - 1] == nums[i])) continue;
            for (int j = i + 1; j < n - 2; j++) {
                if (j >  i + 1 && nums[j - 1] == nums[j]) continue;
                int l = j + 1; 
                int r = n - 1;
                long long int tg_nw = nums[i] + nums[j];
                while (l < r) {
                    long long int rem = tg - tg_nw;
                    long long int now = nums[l] + nums[r];
                    if (rem == now) {
                        st.insert({
                            nums[i],
                            nums[j],
                            nums[l],
                            nums[r]
                        });
                        ++l;
                    }
                    if (now < rem) l++;
                    if (now > rem) r--;
                }
            }
        }
        for (auto it : st) ans.push_back(it);
        return ans;
    }

    vector<vector<int>> fourSumSafe(vector<int>& nums, int target) 
    {
        vector<vector<int>> res;

        sort(nums.begin(), nums.end());

        int n = int(nums.size());

        res.reserve(n);
        bool is_pos = target >= 0;
        for(int i = 0; i < n - 3; ++i) 
        {
            // Пропускаем, т.к. уже такую тройку добавили.

            if(i > 0 && nums[i] == nums[i - 1])
            {
                continue;
            }

            int val = nums[i];

            if(is_pos && val > target)
            {
                break;
            }
            else if(!is_pos && val > 0)
            {
                break;
            }
            
            for(int j = i + 1; j < n - 2; ++j)
            {
                if(j > i + 1 && nums[j] == nums[j - 1])
                {
                    continue;
                }

                if(!can_sum(val, nums[j]))
                {
                    continue;
                }

                int left = j + 1, right = n - 1;

                while(left < right)
                {
                    if(!can_sum(val + nums[j], nums[left]))
                    {
                        ++left;
                        continue;
                    }

                    if(!can_sum(val + nums[j] + nums[left], nums[right]))
                    {
                        --right;
                        continue;
                    }

                    int sum = val + nums[j] + nums[left] + nums[right];

                    if(sum == target) 
                    {
                        res.push_back({val, nums[j], nums[left], nums[right]});

                        ++left;

                        --right;

                        while(left < right && nums[left] == nums[left - 1]) ++left;

                        while(left < right && nums[right] == nums[right + 1]) --right;
                    }
                    else if(sum < target)
                    {
                        ++left;
                    }
                    else 
                    {
                        --right;
                    }
                }
            }
        }
        
        return res;    
    }

private:

    bool can_sum(int a, int b)
    {
        if(b < 0 && a < INT_MIN - b)
        {
            return false;    
        }

        if(b > 0 && a > INT_MAX - b)
        {
            return false;
        }

        return true;
    }
};

const int N = 1e5 + 5;
const int INF = 1e9;

int dp[N];

int solve(int n) {
    if (n == 0) return 0;
    if (dp[n] != -1) return dp[n];
    int ans = INF;
    for (int i = 1; i * i <= n; i++) {
        ans = min(ans, solve(n - i * i) + 1);
    }
    return dp[n] = ans;
}

int main() {
    int n;
    cin >> n;
    memset(dp, -1, sizeof(dp));
    cout << solve(n) << endl;
    return 0;
}

#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 5;
const int INF = 1e9;

int dp[N];

int main() {
    int n;
    cin >> n;
    memset(dp, INF, sizeof(dp));
    dp[0] = 0;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j * j <= i; j++) {
            dp[i] = min(dp[i], dp[i - j * j] + 1);
        }
    }
    cout << dp[n] << endl;
    return 0;
}

int getMinSquares(int n) {
    // Базовый случай
    if (n <= 3) {
        return n;
    }

    // Инициализируем результат на худший случай
    int res = n;

    // Проходим по всем числам, которые меньше n и больше 0
    for (int i = 1; i <= n; i++) {
        int temp = i * i;

        // Если i^2 больше n, то оставшиеся числа будут еще больше, выходим из цикла
        if (temp > n) {
            break;
        } else {
            res = min(res, 1 + getMinSquares(n - temp));
        }
    }

    return res;
}


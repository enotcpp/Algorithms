/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* addTwoNumbers(ListNode* a, ListNode* b)
    {
        ListNode root, * result = &root;

        int sum = 0;

        for
        (
            int sum = 0; 
            a || b || sum;
            result = result->next,
            sum /= 10
        )
        {
            if(a)
            {
                sum += a->val;
                a = a->next;
            }

            if(b)
            {
                sum += b->val;
                b = b->next;
            }

            result->next = new ListNode(sum % 10);
        }

        return root.next;       
    }

    ListNode* addTwoNumbers1(ListNode* a, ListNode* b)
    {
        ListNode root, * result = &root;

        int sum = 0;

        while(a && b)
        {
            sum += a->val + b->val;
            
            result->next = new ListNode(sum % 10);

            sum /= 10;

            a = a->next;
            b = b->next;
            result = result->next;
        }

        for(ListNode * n = a ? a : b; n; n = n->next)
        {        
            sum += n->val;

            result->next = new ListNode(sum % 10); 

            sum /= 10;

            result = result->next;
        }

        if(sum)
        {
            result->next = new ListNode(1);     
        }

        return root.next;       
    }
    
    ListNode* addTwoNumbers2(ListNode* l1, ListNode* l2) 
    {
        int add = 0;

        ListNode * root = new ListNode(0), * result = root; 
        
        for
        (
            ;
            l1 && l2;
            result = result->next,
            l1 = l1->next,
            l2 = l2->next, 
            add = add > 9
        )
        {
            result->next = new ListNode((add += l1->val + l2->val) % 10);
        }

        for
        (
            ListNode * node = l1 ? l1 : l2;
            node;
            result = result->next, 
            node = node->next,
            add = add > 9            
        )
        {
            result->next = new ListNode((add += node->val) % 10);
        }       

        if(add)
        {  
            result->next = new ListNode(1);
        }    

        return root->next;
    }
    
    ListNode* addTwoNumbers3(ListNode* l1, ListNode* l2) 
    {
        int carry = 0, sum = 0, x = 0, y = 0;

        ListNode * head = new ListNode(0), * node = head; 
        
        while(l1 || l2)
        {
            x = l1 ? l1->val : 0;
            y = l2 ? l2->val : 0;
            
            sum = carry + x + y;
            
            carry = sum / 10;
            
            node->next = new ListNode(sum % 10);
            node = node->next;
            
            l1 = l1 ? l1->next : nullptr;
            l2 = l2 ? l2->next : nullptr;            
        }
        
        if(carry)
        {
            node->next = new ListNode(1);    
        }
        
        return head->next;
    }
};

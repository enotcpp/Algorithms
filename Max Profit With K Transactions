#include <vector>
using namespace std;

//+------------------------------------------------------------------+
//| get_max_sum                                                      |
//+------------------------------------------------------------------+

int get_max_sum(const vector<vector<int>>& profits, int from, int to, int depth)
{
   int result = 0;
   
   if(depth)
   {
      for(int i = from; i < to; ++i)
      {
         for(int j = i; j < to; ++j)
         {
            result = 
               max
               (
                  result, 
                  profits[i][j] + 
                  get_max_sum(profits, j + 1, to + 1, depth - 1)
               ); 
         }
      }
   }
   
   return result;
}

//+------------------------------------------------------------------+
//| max_profit_no_dp                                                 |
//+------------------------------------------------------------------+

int max_profit_no_dp(vector<int>& prices, int k)
{
   int size = int(prices.size()), bottom = INT_MAX, top = INT_MIN; 
   
   vector<int> tops, bottoms;
   
   tops.reserve(size);
   bottoms.reserve(size);
   
   for(int i = 1; i < size; ++i)
   {
      if(prices[i] - prices[i - 1] >= 0)
      {
         bottom = min(bottom, prices[i - 1]);
         top    = max(top,    prices[i]); 
      }
      else
      {
         if(top != INT_MIN)
         {
            tops.push_back(top);
            bottoms.push_back(bottom);
            
            top    = INT_MIN;
            bottom = prices[i];            
         }
      }
   }
   
   if(top != INT_MIN)
   {
      tops.push_back(top);
      bottoms.push_back(bottom);           
   }
   
   size = int(tops.size());
   
   if(k > size)
   {
      k = size;
   }
   
   vector<vector<int>> profits;
   
   profits.resize(size);
   
   for(int i = 0; i < size; ++i)
   {
      profits[i].resize(size);
      
      bottom = bottoms[i];
      
      for(int j = i; j < size; ++j)
      {
         profits[i][j] = tops[j] - bottom;   
      }   
   }

   int result = 0;
   
   for(int i = k; i; --i)
   {
      result = max(result, get_max_sum(profits, 0, size - k + 1, i));
   }
   
   return result;
}

//+------------------------------------------------------------------+
//| max_profit_dp_1                                                  |
//| O(nk) time | O(nk) space                                         |
//+------------------------------------------------------------------+

int max_profit_dp_1(vector<int>& prices, int k)
{
    int days = int(prices.size()), transactions = k + 1;

    if(!days)
    {
        return 0;
    }

    vector<vector<int>> profits(k + 1, vector<int>(days, 0));

    for(int t = 1; t < transactions; ++t)
    {
        int prev_max = INT_MIN;

        for(int d = 1; d < days; ++d)
        {
            prev_max = 
                max(prev_max, profits[t - 1][d - 1] - prices[d - 1]);
            
            profits[t][d] =
                max(profits[t][d - 1], prev_max + prices[d]);
        }
    }

    return profits[k][days - 1];
}

//+------------------------------------------------------------------+
//| max_profit_dp_2                                                  |
//| O(nk) time | O(n) space                                          |
//+------------------------------------------------------------------+

int max_profit_dp_2(vector<int>& prices, int k)
{
    int days = int(prices.size()), transactions = k + 1;

    if(!days)
    {
        return 0;
    }

    vector<int> * profits      = nullptr;
    vector<int> * prev_profits = nullptr;
    
    vector<int> even_profits(days, 0);
    vector<int> odd_profits(days, 0); 

    for(int t = 1; t < transactions; ++t)
    {
        int prev_max = INT_MIN;

        profits      = t & 1 ? &odd_profits : &even_profits;
        prev_profits = t & 1 ? &even_profits : &odd_profits;

        for(int d = 1; d < days; ++d)
        {
            prev_max = 
                max(prev_max, (*prev_profits)[d - 1] - prices[d - 1]);
            
            (*profits)[d] =
                max((*profits)[d - 1], prev_max + prices[d]);
        }
    }

    return k & 1 ? odd_profits.back() : even_profits.back();
}

#include <vector>
using namespace std;

//+------------------------------------------------------------------+
//| get_max_sum                                                      |
//+------------------------------------------------------------------+

int get_max_sum(const vector<vector<int>>& profits, int from, int to, int depth)
{
   int result = 0;
   
   if(depth)
   {
      for(int i = from; i < to; ++i)
      {
         for(int j = i; j < to; ++j)
         {
            result = 
               max
               (
                  result, 
                  profits[i][j] + 
                  get_max_sum(profits, j + 1, to + 1, depth - 1)
               ); 
         }
      }
   }
   
   return result;
}

//+------------------------------------------------------------------+
//| max_profit_no_dp                                                 |
//+------------------------------------------------------------------+

int max_profit_no_dp(vector<int>& prices, int k)
{
   int size = int(prices.size()), bottom = INT_MAX, top = INT_MIN; 
   
   vector<int> tops, bottoms;
   
   tops.reserve(size);
   bottoms.reserve(size);
   
   for(int i = 1; i < size; ++i)
   {
      if(prices[i] - prices[i - 1] >= 0)
      {
         bottom = min(bottom, prices[i - 1]);
         top    = max(top,    prices[i]); 
      }
      else
      {
         if(top != INT_MIN)
         {
            tops.push_back(top);
            bottoms.push_back(bottom);
            
            top    = INT_MIN;
            bottom = prices[i];            
         }
      }
   }
   
   if(top != INT_MIN)
   {
      tops.push_back(top);
      bottoms.push_back(bottom);           
   }
   
   size = int(tops.size());
   
   if(k > size)
   {
      k = size;
   }
   
   vector<vector<int>> profits;
   
   profits.resize(size);
   
   for(int i = 0; i < size; ++i)
   {
      profits[i].resize(size);
      
      bottom = bottoms[i];
      
      for(int j = i; j < size; ++j)
      {
         profits[i][j] = tops[j] - bottom;   
      }   
   }

   int result = 0;
   
   for(int i = k; i; --i)
   {
      result = max(result, get_max_sum(profits, 0, size - k + 1, i));
   }
   
   return result;
}

void run()
{
   vector<int> prices({1, 25, 24, 23, 12, 36, 14, 40, 31, 41, 5});
   
   cout << prices.size() << " : " << prices.back() << endl;

   cout << "Max : " << max_profit(prices, 2) << endl;          
}

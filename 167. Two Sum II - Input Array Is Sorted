class Solution {
public:
    vector<int> twoSum1(vector<int>& a, int target) 
    {
        int left = 0, right = a.size() - 1;
        while (left < right) {
            int sum = a[left] + a[right];
            if (sum == target) {
                return {left + 1, right + 1};
            } else if (sum < target) {
                left++;
            } else {
                right--;
            }
        }
        return {};   
    }

    vector<int> twoSum2(vector<int>& a, int target) 
    {
        unordered_map<int, int> valueToIndex;

        for(int i = 0, size = a.size(); i < size; ++i)
        {
            auto it = valueToIndex.find(target - a[i]);

            if(it != valueToIndex.end())
            {
                return {it->second + 1, i + 1};
            }
            valueToIndex[a[i]] = i;
        }

        return {};
    }

    vector<int> twoSum3(vector<int>& a, int target) 
    {
        for(int i = 0, size = a.size(); i < size; ++i)
        {
            int j = (int)(upper_bound(a.begin(), a.end(), target - a[i]) - a.begin()) - 1;

            if(a[j] == target - a[i])
            {
                return {i + 1, j + 1};
            }
        }

        return {};
    }

    vector<int> twoSum(vector<int>& a, int target) 
    {   
        int size = int(a.size());

        for(int i = 0, j = size - 1; i < size; ++i)
        {
            while(j >= 0 && sumGreater(a[i], a[j], target))
            {
                --j;
            }

            if(sumEquals(a[i], a[j], target))
            {
                return {i + 1, j + 1};
            }
        }
        return {};    
    }
private:

    bool sumGreater(int a, int b, int c) //a + b > c
    {
        if(b > 0 && a > INT_MAX - b)
        {
            return true;
        }

        if(b < 0 && a < INT_MIN - b)
        {
            return false;
        }
        return a + b > c;
    }

    bool sumEquals(int a, int b, int c) //a + b == c
    {
        if(b > 0 && a > INT_MAX - b)
        {
            return false;
        }

        if(b < 0 && a < INT_MIN - b)
        {
            return false;
        }

        return a + b == c;
    }
};
